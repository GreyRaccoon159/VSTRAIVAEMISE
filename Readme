/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* USER CODE BEGIN PV */
int BUTTONSTATE = 0;
int BUTTONDOOR = 0;
int count = 0;
int mode = 0;
uint16_t GREENSTATE = 0;
uint16_t YELLOWSTATE = 0;
uint16_t REDSTATE = 0;
uint16_t TEMPRATURE = 0;
extern volatile uint16_t buttondoor;
volatile uint16_t counterTEMP;
uint16_t cntTEMP, cnt3;
int previousButtonState = 0;
int isButtonPressed = 0;
int currentButtonState = 0;
int targetTemperature = 2; // Желаемая температура
   int currentTemperature = 0; // Текущая температура (имитация)
int temperature = 0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM3_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */


void smoothLEDsOn()
{
        htim3.Instance->CCR1 = 0;
        htim3.Instance->CCR2 = 0;
}
void smoothLEDsOff()
{
        htim3.Instance->CCR1 = 1000;
        htim3.Instance->CCR2 = 1000;
}

void smoothLED()
{
    HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_RESET);
		for(int i=0; i<=200; i+=1)
	    {
	        TIM3->CCR1 = i;
	        TIM3->CCR2 = 200-i;
	        HAL_Delay(1);
	    }
        for(int i=0; i<=200; i+=1)
        {
        	TIM3->CCR2 = i;
        	TIM3->CCR1 = 200-i;
        	HAL_Delay(1);
        }
		for(int i=0; i<=200; i+=1)
	    {
	        TIM3->CCR1 = i;
	        TIM3->CCR2 = 200-i;
	        HAL_Delay(1);
	    }
        for(int i=0; i<=200; i+=1)
        {
        	TIM3->CCR2 = i;
        	TIM3->CCR1 = 200-i;
        	HAL_Delay(1);
        }
		for(int i=0; i<=200; i+=1)
	    {
	        TIM3->CCR1 = i;
	        TIM3->CCR2 = 200-i;
	        HAL_Delay(1);
	    }
        for(int i=0; i<=200; i+=1)
        {
        	TIM3->CCR2 = i;
        	TIM3->CCR1 = 200-i;
        	HAL_Delay(1);
        }
}

void smoothLED1()
{
    HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_RESET);
		for(int i=0; i<=500; i+=1)
	    {
	        TIM3->CCR1 = i;
	        TIM3->CCR2 = 500-i;
	        HAL_Delay(1);
	    }
        for(int i=0; i<=500; i+=1)
        {
        	TIM3->CCR2 = i;
        	TIM3->CCR1 = 500-i;
        	HAL_Delay(1);
        }
		for(int i=0; i<=500; i+=1)
	    {
	        TIM3->CCR1 = i;
	        TIM3->CCR2 = 500-i;
	        HAL_Delay(1);
	    }
        for(int i=0; i<=500; i+=1)
        {
        	TIM3->CCR2 = i;
        	TIM3->CCR1 = 500-i;
        	HAL_Delay(1);
        }
		for(int i=0; i<=500; i+=1)
	    {
	        TIM3->CCR1 = i;
	        TIM3->CCR2 = 500-i;
	        HAL_Delay(1);
	    }
        for(int i=0; i<=500; i+=1)
        {
        	TIM3->CCR2 = i;
        	TIM3->CCR1 = 500-i;
        	HAL_Delay(1);
        }

}

void smoothLED2()
{
    HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_SET);
	for(int i=0; i<=1000; i+=1)
    {
        TIM3->CCR1 = i;
        TIM3->CCR2 = 1000-i;
        HAL_Delay(1);
    }
    for(int i=0; i<=1000; i+=1)
    {
    	TIM3->CCR2 = i;
    	TIM3->CCR1 = 1000-i;
    	HAL_Delay(1);
    }
	for(int i=0; i<=1000; i+=1)
    {
        TIM3->CCR1 = i;
        TIM3->CCR2 = 1000-i;
        HAL_Delay(1);
    }
	HAL_GPIO_WritePin(SIGNALDOOR_GPIO_Port, SIGNALDOOR_Pin, GPIO_PIN_SET);
	smoothLEDsOff();
	HAL_Delay(3000);
	HAL_GPIO_WritePin(DOORSTATE_GPIO_Port, DOORSTATE_Pin, GPIO_PIN_SET);
	HAL_Delay(300);
	HAL_GPIO_WritePin(DOORSTATE_GPIO_Port, DOORSTATE_Pin, GPIO_PIN_RESET);
	HAL_Delay(300);
	HAL_GPIO_WritePin(DOORSTATE_GPIO_Port, DOORSTATE_Pin, GPIO_PIN_SET);
	HAL_Delay(300);
	HAL_GPIO_WritePin(DOORSTATE_GPIO_Port, DOORSTATE_Pin, GPIO_PIN_RESET);
	HAL_Delay(300);
	HAL_GPIO_WritePin(DOORSTATE_GPIO_Port, DOORSTATE_Pin, GPIO_PIN_SET);
	HAL_Delay(300);
	HAL_GPIO_WritePin(DOORSTATE_GPIO_Port, DOORSTATE_Pin, GPIO_PIN_RESET);
	HAL_Delay(300);
	HAL_GPIO_WritePin(DOORSTATE_GPIO_Port, DOORSTATE_Pin, GPIO_PIN_SET);
	HAL_Delay(300);
	HAL_GPIO_WritePin(DOORSTATE_GPIO_Port, DOORSTATE_Pin, GPIO_PIN_RESET);
	HAL_Delay(300);
	HAL_GPIO_WritePin(DOORSTATE_GPIO_Port, DOORSTATE_Pin, GPIO_PIN_SET);
	HAL_Delay(300);
	HAL_GPIO_WritePin(SIGNALDOOR_GPIO_Port, SIGNALDOOR_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(DOORSTATE_GPIO_Port, DOORSTATE_Pin, GPIO_PIN_RESET);
    for(int i=0; i<=1000; i+=1)
    {
    	TIM3->CCR2 = i;
    	TIM3->CCR1 = 1000-i;
    	HAL_Delay(1);
    }
	for(int i=0; i<=1000; i+=1)
    {
        TIM3->CCR1 = i;
        TIM3->CCR2 = 1000-i;
        HAL_Delay(1);
    }
    for(int i=0; i<=1000; i+=1)
    {
    	TIM3->CCR2 = i;
    	TIM3->CCR1 = 1000-i;
    	HAL_Delay(1);
    }

}

void smoothLED3()
{
    HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_SET);
    for(int i=0; i<=1000; i+=1)
        {
        	TIM3->CCR2 = i;
        	TIM3->CCR1 = 1000-i;
        	HAL_Delay(1);
        }
    	for(int i=0; i<=1000; i+=1)
        {
            TIM3->CCR1 = i;
            TIM3->CCR2 = 100-i;
            HAL_Delay(1);
        }
        for(int i=0; i<=1000; i+=1)
        {
        	TIM3->CCR2 = i;
        	TIM3->CCR1 = 500-i;
        	HAL_Delay(1);
        }
        for(int i=0; i<=1000; i+=1)
            {
            	TIM3->CCR2 = i;
            	TIM3->CCR1 = 1000-i;
            	HAL_Delay(1);
            }
        	for(int i=0; i<=1000; i+=1)
            {
                TIM3->CCR1 = i;
                TIM3->CCR2 = 80-i;
                HAL_Delay(1);
            }
            for(int i=0; i<=1000; i+=1)
            {
            	TIM3->CCR2 = i;
            	TIM3->CCR1 = 1000-i;
            	HAL_Delay(1);
            }
		smoothLEDsOn();
	    HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_RESET);
		HAL_Delay(100);
		HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_SET);
		HAL_Delay(200);
		HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_SET);
		HAL_Delay(300);
		HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_SET);
		HAL_Delay(300);
	    HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_RESET);
	    HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_RESET);
		HAL_Delay(300);
	    HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_SET);
	    HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_SET);
	    HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_SET);
		HAL_Delay(300);
		HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_RESET);
		HAL_Delay(300);
	    HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_SET);
	    HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_SET);
	    HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_SET);
		HAL_Delay(300);
		HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_RESET);
		HAL_Delay(300);
	    HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_SET);
	    HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_SET);
	    HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_SET);
		HAL_Delay(300);
		HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_RESET);
		HAL_Delay(300);
		HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_SET);
		HAL_Delay(200);
		HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_SET);
		HAL_Delay(300);
		HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_SET);
		HAL_Delay(300);
		HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_RESET);
		HAL_Delay(300);
	    HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_SET);
	    HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_SET);
	    HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_SET);
		HAL_Delay(300);
		HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_RESET);
		HAL_Delay(300);
	    HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_SET);
	    HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_SET);
	    HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_SET);
		HAL_Delay(300);
		HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_RESET);
		HAL_Delay(300);
	    HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_SET);
	    HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_SET);
	    HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_SET);
		HAL_Delay(300);
		HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_RESET);
		HAL_Delay(300);
		HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_SET);
		HAL_Delay(200);
		HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_SET);
		HAL_Delay(300);
		HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_SET);
		HAL_Delay(300);
		HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_RESET);
}
void smoothLED4()
{
    HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(YELLOWSTATE_GPIO_Port, YELLOWSTATE_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_SET);
	for(int i=0; i<=1000; i+=1)
    {
        TIM3->CCR1 = i;
        TIM3->CCR2 = 1000-i;
        HAL_Delay(1);
    }
    for(int i=0; i<=1000; i+=1)
    {
    	TIM3->CCR2 = i;
    	TIM3->CCR1 = 0;
    	HAL_Delay(1);
    }
	for(int i=0; i<=1000; i+=1)
    {
        TIM3->CCR1 = 0;
        TIM3->CCR2 = 1000;
        HAL_Delay(1);
    }
	smoothLEDsOn();
	HAL_Delay(300);
	HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_SET);
	HAL_Delay(200);
	HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_RESET);
	HAL_Delay(200);
	HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_SET);
	HAL_Delay(200);
	HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_RESET);
	HAL_Delay(200);
	HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_SET);
	HAL_Delay(200);
	HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_RESET);
	HAL_Delay(200);
	HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_SET);
	HAL_Delay(200);
	HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_RESET);
	HAL_Delay(200);
	HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_SET);
	HAL_Delay(200);
	HAL_GPIO_WritePin(GREENSTATE_GPIO_Port, GREENSTATE_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(REDSTATE_GPIO_Port, REDSTATE_Pin, GPIO_PIN_RESET);
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM1_Init();
  MX_TIM3_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  	HAL_TIM_Base_Start_IT(&htim3);

	while (1)
	{
		BUTTONDOOR = HAL_GPIO_ReadPin(BUTSTATE_GPIO_Port, BUTSTATE_Pin);

		if(BUTTONDOOR == 1)
		{
			count++;
			switch (count) {
			      case 1:
			    	smoothLED();
			        break;
			      case 2:
			    	smoothLED1();
			        break;
			      case 3:
			      	smoothLED2();
			      	break;
			      case 4:
			      	smoothLED3();
			      	break;
			      case 5:
			    	smoothLED4();
			      	count = 0; // Сброс счетчика
			      	break;
			      default:
			        break;
			    }

			    HAL_Delay(500); // Задержка для предотвращения дребезга кнопки

		}

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 40-1;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 500-1;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1000-1;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 0;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREENSTATE_Pin|YELLOWSTATE_Pin|REDSTATE_Pin|DOORSTATE_Pin
                          |SIGNALDOOR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTSTATE_Pin BUTDOOR_Pin */
  GPIO_InitStruct.Pin = BUTSTATE_Pin|BUTDOOR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : GREENSTATE_Pin YELLOWSTATE_Pin REDSTATE_Pin DOORSTATE_Pin
                           SIGNALDOOR_Pin */
  GPIO_InitStruct.Pin = GREENSTATE_Pin|YELLOWSTATE_Pin|REDSTATE_Pin|DOORSTATE_Pin
                          |SIGNALDOOR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
	{
	}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

